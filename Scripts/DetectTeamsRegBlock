#Requires -Version 5.1
<#
.SYNOPSIS
    Detects registry keys blocking Microsoft Teams (New Teams) MSIX installation and validates installer URL.
.DESCRIPTION
    Checks Appx-related policies that block MSIX installs, then verifies the official Teams installer URL resolves (no 404).
.NOTES
    Author: Tier-0 Escalation
    Date: 2025-10-22
#>

$ErrorActionPreference = 'Stop'
$issuesFound = $false

try {
    Write-Output "=== Checking registry policies ==="

    $registryPaths = @(
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock',
        'HKLM:\SOFTWARE\Policies\Microsoft\Windows\Appx'
    )

    function Test-RegistryValue {
        param(
            [string]$Path,
            [string]$Name
        )
        try {
            if (Test-Path $Path) {
                $item = Get-ItemProperty -Path $Path -ErrorAction Stop
                if ($item.PSObject.Properties.Name -contains $Name) {
                    return $item.$Name
                }
            }
        } catch {
            return $null
        }
        return $null
    }

    foreach ($path in $registryPaths) {

        $block = Test-RegistryValue -Path $path -Name 'BlockNonAdminUserInstall'
        if ($null -ne $block -and [int]$block -eq 1) {
            Write-Output "❌ BlockNonAdminUserInstall=1 at $path (should be 0 or not exist)"
            $issuesFound = $true
        }

        $allow = Test-RegistryValue -Path $path -Name 'AllowAllTrustedApps'
        if ($null -ne $allow -and [int]$allow -ne 1) {
            Write-Output "⚠️ AllowAllTrustedApps=$allow at $path (should be 1)"
            $issuesFound = $true
        }

        $dev = Test-RegistryValue -Path $path -Name 'AllowDevelopmentWithoutDevLicense'
        if ($null -ne $dev -and [int]$dev -ne 1) {
            Write-Output "⚠️ AllowDevelopmentWithoutDevLicense=$dev at $path (should be 1 or not exist)"
            $issuesFound = $true
        }
    }

    Write-Output "`n=== Checking Teams installer URL ==="

    # Known good URLs
    $testUrls = @(
        "https://aka.ms/newteems",
        "https://statics.teams.cdn.office.net/production-windows-x64/teamsbootstrapper.exe"
    )

    foreach ($url in $testUrls) {
        try {
            $response = Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing -ErrorAction Stop
            if ($response.StatusCode -eq 200) {
                Write-Output "✅ URL reachable: $url"
            } else {
                Write-Output "❌ Unexpected HTTP status $($response.StatusCode) for $url"
                $issuesFound = $true
            }
        } catch {
            Write-Output "❌ Failed to reach $url – $($_.Exception.Message)"
            $issuesFound = $true
        }
    }

    Write-Output "`n=== Summary ==="
    if ($issuesFound) {
        Write-Output "RESULT: Teams installation blocking issues detected or URL unreachable."
        exit 1
    } else {
        Write-Output "RESULT: No Teams blocking issues found. System ready for MSIX installation."
        exit 0
    }

} catch {
    Write-Error "Detection script failed: $($_.Exception.Message)"
    exit 1
}
